{"status":{"gcode":{"commands":{"M110":{},"M112":{},"M115":{},"RESTART":{"help":"Reload config file and restart host software"},"FIRMWARE_RESTART":{"help":"Restart firmware, host, and reload config"},"ECHO":{},"STATUS":{"help":"Report the printer status"},"HELP":{"help":"Report the list of available extended G-Code commands"},"SAVE_CONFIG":{"help":"Overwrite config file and restart"},"G1":{},"G20":{},"G21":{},"M82":{},"M83":{},"G90":{},"G91":{},"G92":{},"M220":{},"M221":{},"SET_GCODE_OFFSET":{"help":"Set a virtual offset to g-code positions"},"SAVE_GCODE_STATE":{"help":"Save G-Code coordinate state"},"RESTORE_GCODE_STATE":{"help":"Restore a previously saved G-Code state"},"G0":{},"M114":{},"GET_POSITION":{"help":"Return information on the current location of the toolhead"},"M20":{},"M21":{},"M23":{},"M24":{},"M25":{},"M26":{},"M27":{},"M28":{},"M29":{},"M30":{},"SDCARD_RESET_FILE":{"help":"Clears a loaded SD File. Stops the print if necessary"},"SDCARD_PRINT_FILE":{"help":"Loads a SD file and starts the print.  May include files in subdirectories."},"CLEAR_PAUSE":{"help":"Clears the current paused state without resuming the print"},"M73":{},"SET_DISPLAY_TEXT":{"help":"Set or clear the display message"},"M118":{},"RESPOND":{"help":"Echo the message prepended with a prefix"},"SET_GCODE_VARIABLE":{"help":"Set the value of a G-Code macro variable"},"SET_PAUSE_NEXT_LAYER":{"help":"Enable a pause if the next layer is reached"},"SET_PAUSE_AT_LAYER":{"help":"Enable/disable a pause if a given layer number is reached"},"_TOOLHEAD_PARK_PAUSE_CANCEL":{"help":"Helper: park toolhead used in PAUSE and CANCEL_PRINT"},"_CLIENT_EXTRUDE":{"help":"Extrudes, if the extruder is hot enough"},"_CLIENT_RETRACT":{"help":"Retracts, if the extruder is hot enough"},"GET_TIMELAPSE_SETUP":{"help":"Print the Timelapse setup"},"_SET_TIMELAPSE_SETUP":{"help":"Set user parameters for timelapse"},"TIMELAPSE_TAKE_FRAME":{"help":"Take Timelapse shoot"},"_TIMELAPSE_NEW_FRAME":{"help":"action call for timelapse shoot. must be a seperate macro"},"UPDATE_DELAYED_GCODE":{"help":"Update the duration of a delayed_gcode"},"HYPERLAPSE":{"help":"Start/Stop a hyperlapse recording"},"TIMELAPSE_RENDER":{"help":"Render Timelapse video and wait for the result"},"TEST_STREAM_DELAY":{"help":"Helper macro to find stream and park delay"},"TURN_OFF_HEATERS":{"help":"Turn off all heaters"},"M105":{},"TEMPERATURE_WAIT":{"help":"Wait for a temperature on a sensor"},"QUERY_ADC":{"help":"Report the last value of an analog pin"},"PID_CALIBRATE":{"help":"Run PID calibration test"},"SET_HEATER_TEMPERATURE":{"help":"Sets a heater temperature"},"M140":{},"M106":{},"M107":{},"QUERY_PROBE":{"help":"Return the status of the z-probe"},"PROBE":{"help":"Probe Z-height at current XY position"},"PROBE_CALIBRATE":{"help":"Calibrate the probe's z_offset"},"PROBE_ACCURACY":{"help":"Probe Z-height accuracy at current XY position"},"Z_OFFSET_APPLY_PROBE":{"help":"Adjust the probe's z_offset"},"BLTOUCH_DEBUG":{"help":"Send a command to the bltouch for debugging"},"BLTOUCH_STORE":{"help":"Store an output mode in the BLTouch EEPROM"},"BED_MESH_CALIBRATE":{"help":"Perform Mesh Bed Leveling"},"BED_MESH_PROFILE":{"help":"Bed Mesh Persistent Storage management"},"BED_MESH_OUTPUT":{"help":"Retrieve interpolated grid of probed z-points"},"BED_MESH_MAP":{"help":"Serialize mesh and output to terminal"},"BED_MESH_CLEAR":{"help":"Clear the Mesh so no z-adjustment is made"},"BED_MESH_OFFSET":{"help":"Add X/Y offsets to the mesh lookup"},"BED_SCREWS_ADJUST":{"help":"Tool to help adjust bed leveling screws"},"G28":{},"QUERY_FILAMENT_SENSOR":{"help":"Query the status of the Filament Sensor"},"SET_FILAMENT_SENSOR":{"help":"Sets the filament sensor on/off"},"SET_INPUT_SHAPER":{"help":"Set cartesian parameters for input shaper"},"SET_LED":{"help":"Set the color of an LED"},"SET_LED_TEMPLATE":{"help":"Assign a display_template to an LED"},"SET_IDLE_TIMEOUT":{"help":"Set the idle timeout in seconds"},"STATE_NOTIFY_STATE":{"help":"Get current printer status"},"STATE_NOTIFY":{"help":"Display the state_notify state"},"POWER_OFF_PRINTER":{"help":"G-Code macro"},"STEPPER_BUZZ":{"help":"Oscillate a given stepper to help id it"},"FORCE_MOVE":{"help":"Manually move a stepper; invalidates kinematics"},"SET_KINEMATIC_POSITION":{"help":"Force a low-level kinematic position"},"PAUSE_RUNOUT":{"help":"G-Code macro"},"M600":{"help":"G-Code macro"},"FORCE_MOVE_DOWN":{"help":"G-Code macro"},"FORCE_MOVE_UP":{"help":"G-Code macro"},"REASONABLE_ACCEL":{"help":"G-Code macro"},"M900":{"help":"G-Code macro"},"BED_MESH_CALIBRATE_AUTOMATIC":{"help":"Automatic Bed Mesh Calibrate"},"SCREWS_TILT_CALIBRATE":{"help":"Automatic Screw Tilt Calibrate"},"DUMP_VARIABLES":{"help":"G-Code macro"},"GET_VARIABLE":{"help":"G-Code macro"},"EXCLUDE_OBJECT_START":{"help":"Marks the beginning the current object as labeled"},"EXCLUDE_OBJECT_END":{"help":"Marks the end the current object"},"EXCLUDE_OBJECT":{"help":"Cancel moves inside a specified objects"},"EXCLUDE_OBJECT_DEFINE":{"help":"Provides a summary of an object"},"M486":{"help":"G-Code macro"},"M18":{},"M84":{},"SET_STEPPER_ENABLE":{"help":"Enable/disable individual stepper by name"},"QUERY_ENDSTOPS":{"help":"Report on the status of each endstop"},"M119":{},"G4":{},"M400":{},"SET_VELOCITY_LIMIT":{"help":"Set printer velocity limits"},"M204":{},"MANUAL_PROBE":{"help":"Start manual probe helper script"},"TUNING_TOWER":{"help":"Tool to adjust a parameter at each Z height"},"SET_PRESSURE_ADVANCE":{"help":"Set pressure advance parameters"},"SET_EXTRUDER_ROTATION_DISTANCE":{"help":"Set extruder rotation distance"},"SYNC_EXTRUDER_MOTION":{"help":"Set extruder stepper motion queue"},"M104":{},"ACTIVATE_EXTRUDER":{"help":"Change the active extruder"},"BASE_CANCEL_PRINT":{"help":"Renamed builtin of 'CANCEL_PRINT'"},"CANCEL_PRINT":{"help":"Cancel the actual running print"},"BASE_PAUSE":{"help":"Renamed builtin of 'PAUSE'"},"PAUSE":{"help":"Pause the actual running print"},"BASE_RESUME":{"help":"Renamed builtin of 'RESUME'"},"RESUME":{"help":"Resume the actual running print"},"SET_PRINT_STATS_INFO_BASE":{"help":"Renamed builtin of 'SET_PRINT_STATS_INFO'"},"SET_PRINT_STATS_INFO":{"help":"Overwrite, to get pause_next_layer and pause_at_layer feature"},"M117.1":{"help":"Renamed builtin of 'M117'"},"M117":{"help":"G-Code macro"},"M99109":{"help":"Renamed builtin of 'M109'"},"M109":{"help":"G-Code macro"},"M99190":{"help":"Renamed builtin of 'M190'"},"M190":{"help":"G-Code macro"}}},"webhooks":{"state":"ready","state_message":"Printer is ready"},"configfile":{"config":{"virtual_sdcard":{"path":"~/printer_data/gcodes","on_error_gcode":"CANCEL_PRINT"},"pause_resume":{"recover_velocity":"25"},"display_status":{},"respond":{"default_prefix":">"},"gcode_macro CANCEL_PRINT":{"description":"Cancel the actual running print","rename_existing":"BASE_CANCEL_PRINT","gcode":"\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT"},"gcode_macro PAUSE":{"description":"Pause the actual running print","rename_existing":"BASE_PAUSE","gcode":"\n\n{% set z = params.Z|default(25)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}\n\n\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info(\"Pause zhop exceeds maximum Z height.\") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000\nSAVE_GCODE_STATE NAME=PAUSEPARK\n\nSET_IDLE_TIMEOUT TIMEOUT=43200\n{% endif %}"},"gcode_macro RESUME":{"description":"Resume the actual running print","rename_existing":"BASE_RESUME","variable_last_extruder_temp":"{'restore': False, 'temp': 0}","variable_restore_idle_timeout":"0","variable_idle_state":"False","gcode":"\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_FILAMENT_SENSOR SENSOR=e0_sensor ENABLE=1\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM109 S{etemp|int}\n{% endif %}\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\n{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}\nG1 Z{zhop * -1} E{e} F900\n{% else %}\nG1 Z{zhop * -1} F900\n{% endif %}\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nBASE_RESUME\n{% endif %}","variable_zhop":"0","variable_etemp":"0"},"gcode_macro SET_PAUSE_NEXT_LAYER":{"description":"Enable a pause if the next layer is reached","gcode":"\n{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE=\"{{ 'enable': ENABLE, 'call': MACRO }}\""},"gcode_macro SET_PAUSE_AT_LAYER":{"description":"Enable/disable a pause if a given layer number is reached","gcode":"\n{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE=\"{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}\""},"gcode_macro SET_PRINT_STATS_INFO":{"rename_existing":"SET_PRINT_STATS_INFO_BASE","description":"Overwrite, to get pause_next_layer and pause_at_layer feature","variable_pause_next_layer":"{ 'enable': False, 'call': \"PAUSE\" }","variable_pause_at_layer":"{ 'enable': False, 'layer': 0, 'call': \"PAUSE\" }","gcode":"\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG='{\"%s, forced by pause_next_layer\" % pause_next_layer.call}'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG='{\"%s, forced by pause_at_layer [%d]\" % (pause_at_layer.call, pause_at_layer.layer)}'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}"},"gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL":{"description":"Helper: park toolhead used in PAUSE and CANCEL_PRINT","gcode":"\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if \"xyz\" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Printer not homed'\n{% endif %}"},"gcode_macro _CLIENT_EXTRUDE":{"description":"Extrudes, if the extruder is hot enough","gcode":"\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='{\"\\\"%s\\\" not hot enough\" % printer.toolhead.extruder}'\n{% endif %}\n{% endif %}"},"gcode_macro _CLIENT_RETRACT":{"description":"Retracts, if the extruder is hot enough","gcode":"\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"},"gcode_macro GET_TIMELAPSE_SETUP":{"description":"Print the Timelapse setup","gcode":"\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n{% set output_txt = [\"Timelapse Setup:\"] %}\n{% set _dummy = output_txt.append(\"enable: %s\" % tl.enable) %}\n{% set _dummy = output_txt.append(\"park: %s\" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append(\"park position: %s time: %s s\" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append(\"park cord x:%s y:%s dz:%s\" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append(\"travel speed: %s mm/s\" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append(\"fw_retract: %s\" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append(\"retract: %s mm speed: %s mm/s\" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append(\"extrude: %s mm speed: %s mm/s\" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append(\"verbose: %s\" % tl.verbose) %}\n{action_respond_info(output_txt|join(\"\\n\"))}"},"gcode_macro _SET_TIMELAPSE_SETUP":{"description":"Set user parameters for timelapse","gcode":"\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']\nelse False %}\n{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n'center': {'x': (max.x-(max.x-min.x)/2)|round(3),\n'y': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in ['true', 'false'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}\n{% else %}\n{action_raise_error(\"ENABLE=%s not supported. Allowed values are [True, False]\" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in ['true', 'false'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}\n{% else %}\n{action_raise_error(\"VERBOSE=%s not supported. Allowed values are [True, False]\" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"CUSTOM_POS_X=%s must be within [%s - %s]\" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"CUSTOM_POS_Y=%s must be within [%s - %s]\" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"CUSTOM_POS_DZ=%s must be within [%s - %s]\" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}\n{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}\n{% else %}\n{action_raise_error(\"PARK_ENABLE=%s not supported. Allowed values are [True, False]\" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom','x_only','y_only'] %}\n{% set dic = {'center'      : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },\n'front_left'  : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },\n'front_right' : {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },\n'back_left'   : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },\n'back_right'  : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },\n'custom'      : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz},\n'x_only'      : {'x': tl.park.custom.x, 'y': 'none'          , 'dz': tl.park.custom.dz},\n'y_only'      : {'x': 'none'          , 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error(\"PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]\"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"PARK_TIME=%s must be a positive number\" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE=\"{tl.park}\"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"TRAVEL_SPEED=%s must be larger than 0\" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"RETRACT_SPEED=%s must be larger than 0\" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"EXTRUDE_SPEED=%s must be larger than 0\" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE=\"{tl.speed}\"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"EXTRUDE_DISTANCE=%s must be specified as positiv number\" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"RETRACT_DISTANCE=%s must be specified as positiv number\" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in ['true', 'false'] %}\n{% if 'firmware_retraction' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({'fw_retract':False}) %}\n{% if params.FW_RETRACT|capitalize == 'True' %}\n{action_raise_error(\"[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract\")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error(\"FW_RETRACT=%s not supported. Allowed values are [True, False]\" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE=\"{tl.extruder}\"\n{% if printer.configfile.settings['gcode_macro pause'] is defined %}\n{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings['gcode_macro resume'] is defined %}\n{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE=\"{tl.macro}\""},"gcode_macro TIMELAPSE_TAKE_FRAME":{"description":"Take Timelapse shoot","variable_enable":"False","variable_takingframe":"False","variable_park":"{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}","variable_extruder":"{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}","variable_speed":"{'travel': 100,\n'retract': 15,\n'extrude': 15}","variable_verbose":"True","variable_check_time":"0.5","variable_restore":"{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}","variable_macro":"{'pause': 'PAUSE', 'resume': 'RESUME'}","variable_is_paused":"False","gcode":"\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}\n{% if enable %}\n{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or\n(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}\n{% if park.enable %}\n{% set pos = {'x': 'X' + park.coord.x|string if park.pos != 'y_only' else '',\n'y': 'Y' + park.coord.y|string if park.pos != 'x_only' else '',\n'z': 'Z'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,\n'extrude'    : printer.gcode_move.absolute_extrude},\n'speed'   : printer.gcode_move.speed,\n'e'       : printer.gcode_move.gcode_position.e,\n'factor'  : {'speed'  : printer.gcode_move.speed_factor,\n'extrude': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE=\"{restore}\"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info(\"Timelapse: Warning, minimum extruder temperature not reached!\")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if \"xyz\" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info(\"Timelapse: Warning, axis not homed yet!\")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info(\"Timelapse: disabled, take frame ignored\")}{% endif %}\n{% endif %}"},"gcode_macro _TIMELAPSE_NEW_FRAME":{"description":"action call for timelapse shoot. must be a seperate macro","gcode":"\n{action_call_remote_method(\"timelapse_newframe\",\nmacropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,\nhyperlapse=params.HYPERLAPSE)}"},"delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME":{"gcode":"\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info(\"Timelapse: Warning minimum extruder temperature not reached!\")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}"},"gcode_macro HYPERLAPSE":{"description":"Start/Stop a hyperlapse recording","variable_cycle":"0","variable_run":"False","gcode":"\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == 'start' %}\n{action_respond_info(\"Hyperlapse: frames started (Cycle %d sec)\" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == 'stop' %}\n{% if run %}{action_respond_info(\"Hyperlapse: frames stopped\")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error(\"Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP\")}\n{% endif %}"},"delayed_gcode _HYPERLAPSE_LOOP":{"gcode":"\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer[\"gcode_macro HYPERLAPSE\"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True"},"gcode_macro TIMELAPSE_RENDER":{"description":"Render Timelapse video and wait for the result","variable_render":"False","variable_run_identifier":"0","gcode":"\n{action_respond_info(\"Timelapse: Rendering started\")}\n{action_call_remote_method(\"timelapse_render\", byrendermacro=\"True\")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings['gcode_macro pause'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5"},"delayed_gcode _WAIT_TIMELAPSE_RENDER":{"gcode":"\n{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}\nM117 Rendering {['-','\\\\','|','/'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info(\"Timelapse: Rendering finished\")}\nM117\n{printer.configfile.settings['gcode_macro resume'].rename_existing}\n{% endif %}"},"gcode_macro TEST_STREAM_DELAY":{"description":"Helper macro to find stream and park delay","gcode":"\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error(\"Toolhead z %.3f to low. Please place head above z = 5.0\" % act.z)}\n{% endif %}"},"stepper_x":{"step_pin":"PC2","dir_pin":"PB9","enable_pin":"!PC3","microsteps":"16","rotation_distance":"40","endstop_pin":"!PA5","position_endstop":"-10","position_max":"235","position_min":"-15","homing_speed":"50"},"stepper_y":{"step_pin":"PB8","dir_pin":"PB7","enable_pin":"!PC3","microsteps":"16","rotation_distance":"40","endstop_pin":"!PA6","position_endstop":"-8","position_max":"238","position_min":"-13","homing_speed":"50"},"stepper_z":{"step_pin":"PB6","dir_pin":"!PB5","enable_pin":"!PC3","microsteps":"16","rotation_distance":"8","endstop_pin":"probe:z_virtual_endstop","position_max":"270","position_min":"-4"},"extruder":{"step_pin":"PB4","dir_pin":"PB3","enable_pin":"!PC3","microsteps":"16","gear_ratio":"42:12","rotation_distance":"26.359","nozzle_diameter":"0.400","filament_diameter":"1.750","heater_pin":"PA1","sensor_type":"EPCOS 100K B57560G104F","smooth_time":"2.0","sensor_pin":"PC5","min_temp":"0","max_temp":"280","max_extrude_only_distance":"101","pressure_advance":"0.02","max_extrude_cross_section":"50.0","control":"pid","pid_kp":"24.178","pid_ki":"1.414","pid_kd":"103.361"},"verify_heater extruder":{"max_error":"600","check_gain_time":"45"},"heater_bed":{"heater_pin":"PA7","sensor_type":"EPCOS 100K B57560G104F","sensor_pin":"PC4","min_temp":"0","max_temp":"110","control":"pid","pid_kp":"72.339","pid_ki":"1.347","pid_kd":"971.155"},"heater_fan hotend_fan":{"pin":"PC0"},"fan":{"pin":"PA0"},"mcu":{"serial":"/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0","restart_method":"command"},"printer":{"kinematics":"cartesian","max_velocity":"300","max_accel":"3950","max_z_velocity":"5","max_z_accel":"100","square_corner_velocity":"2"},"bltouch":{"sensor_pin":"^PC14","control_pin":"PC13","x_offset":"-31.8","y_offset":"-40.5","probe_with_touch_mode":"true","stow_on_each_sample":"false","z_offset":"3.160"},"bed_mesh":{"speed":"120","mesh_min":"10, 10","mesh_max":"200, 194","probe_count":"4,4","algorithm":"bicubic"},"bed_screws":{"screw1":"20, 29","screw2":"195, 29","screw3":"195, 198","screw4":"20, 198"},"safe_z_home":{"home_xy_position":"147, 154","speed":"75","z_hop":"10","z_hop_speed":"5"},"filament_switch_sensor e0_sensor":{"switch_pin":"!PC15","pause_on_runout":"true","runout_gcode":"PAUSE_RUNOUT"},"temperature_sensor STM32F401L":{"sensor_type":"temperature_mcu","min_temp":"0","max_temp":"200","sensor_adc1":"0.244261","sensor_temperature1":"26.0"},"input_shaper":{"shaper_freq_x":"39.0","shaper_type_x":"mzv","shaper_freq_y":"41.6","shaper_type_y":"mzv"},"mcu rpi":{"serial":"/tmp/klipper_host_mcu"},"led led_strip":{"white_pin":"rpi:pwmchip0/pwm0","hardware_pwm":"True","cycle_time":"0.0005","initial_white":"0.0"},"state_notify":{"inactive_timeout":"20","on_ready_gcode":"\n\n\nSET_LED LED=led_strip WHITE=0.5","on_active_gcode":"\n\n\nSET_LED LED=led_strip WHITE=0.8","on_inactive_gcode":"\n\n\nSET_LED LED=led_strip WHITE=0.15"},"gcode_macro STATE_NOTIFY":{"description":"Display the state_notify state","gcode":"\nSTATE_NOTIFY_STATE"},"gcode_macro POWER_OFF_PRINTER":{"gcode":"\n{action_call_remote_method(\"set_device_power\", device=\"printer\", state=\"off\")}"},"idle_timeout":{"gcode":"\nTURN_OFF_HEATERS\nM84\nM107\nG4 P20000\nSET_LED LED=led_strip WHITE=0.0\nG4 P500\nPOWER_OFF_PRINTER","timeout":"480"},"force_move":{"enable_force_move":"True"},"gcode_macro PAUSE_RUNOUT":{"gcode":"\n\n{% set z = params.Z|default(25)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}\n\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{ action_respond_info(\"Filament ran out, pausing for change.\") }\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info(\"Pause zhop exceeds maximum Z height.\") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=43200\n{% endif %}"},"gcode_macro M600":{"gcode":"\n{% set X = 110 %}\n{% set Y = 0 %}\n\n\nSET_FILAMENT_SENSOR SENSOR=e0_sensor ENABLE=0\nPAUSE\nG91\nG1 E-.8 F2700\n\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-100 F1000\n{ action_respond_info(\"Filament change, resume after.\") }"},"gcode_macro FORCE_MOVE_DOWN":{"gcode":"\nFORCE_MOVE STEPPER=stepper_z DISTANCE=-80 VELOCITY=5"},"gcode_macro FORCE_MOVE_UP":{"gcode":"\nFORCE_MOVE STEPPER=stepper_z DISTANCE=20 VELOCITY=5"},"gcode_macro REASONABLE_ACCEL":{"gcode":"\nSET_VELOCITY_LIMIT ACCEL=2800"},"gcode_macro M117":{"rename_existing":"M117.1","gcode":"\nM117.1 {rawparams}\n{action_respond_info(\"> \"+rawparams)}"},"gcode_macro M900":{"gcode":"\n{% if params.K is defined %}\n{% set K = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={K}\n{% endif %}"},"gcode_macro BED_MESH_CALIBRATE_AUTOMATIC":{"description":"Automatic Bed Mesh Calibrate","gcode":"\n{% set TARGET_TEMP = params.TARGET_TEMP | default(60, true) | float %}\nBED_PREHEAT TARGET_TEMP={TARGET_TEMP}\nHOME_PRINTER\nBED_MESH_CALIBRATE"},"gcode_macro SCREWS_TILT_CALIBRATE":{"description":"Automatic Screw Tilt Calibrate","gcode":"\n{% set TARGET_TEMP = params.TARGET_TEMP | default(60, true) | float %}\nBED_PREHEAT TARGET_TEMP={TARGET_TEMP}\nHOME_PRINTER\nSCREWS_TILT_CALCULATE"},"gcode_macro M109":{"rename_existing":"M99109","gcode":"\n\n{% set s = params.S|float %}\n\nM104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}\n{% if s != 0 %}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}\n{% endif %}"},"gcode_macro M190":{"rename_existing":"M99190","gcode":"\n\n{% set s = params.S|float %}\n\nM140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}\n{% if s != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}\n{% endif %}"},"gcode_macro DUMP_VARIABLES":{"gcode":"\n{% set filter_name = params.NAME|default('')|string|lower %}\n{% set filter_value = params.VALUE|default('')|string|lower %}\n{% set show_cfg = params.SHOW_CFG|default(0)|int %}\n\n{% set out = [] %}\n\n{% for key1 in printer %}\n{% for key2 in printer[key1] %}\n{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}\n{% set dummy = out.append(\"printer['%s'].%s = %s\" % (key1, key2, printer[key1][key2])) %}\n{% endif %}\n{% else %}\n{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}\n{% set dummy = out.append(\"printer['%s'] = %s\" % (key1, printer[key1])) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n{action_respond_info(out|join(\"\\n\"))}"},"gcode_macro GET_VARIABLE":{"gcode":"\n{% set names = (params.NAME).split('.')|list %}\n{% set join = (params.JOIN)|default(1)|int %}\n\n{% set _dummy0 = namespace( break = 0 ) %}\n{% set _dummy1 = namespace( out = printer[names|first] ) %}\n\n{% for name in names if _dummy0.break == 0 %}\n{% if loop.index > 1 %}\n{% if name in _dummy1.out %}\n{% set _dummy1.out = _dummy1.out[name] %}\n{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}\n{% set _dummy1.out = _dummy1.out[name|int] %}\n{% else %}\n{% set _dummy0.break = loop.index0 %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if _dummy1.out is boolean %}\n{ action_respond_info('Type: boolean') }\n{% elif _dummy1.out is float %}\n{ action_respond_info('Type: float') }\n{% elif _dummy1.out is integer %}\n{ action_respond_info('Type: integer') }\n{% elif _dummy1.out is mapping %}\n{ action_respond_info('Type: mapping') }\n{% elif _dummy1.out is string %}\n{ action_respond_info('Type: string') }\n{% elif _dummy1.out is iterable %}\n{ action_respond_info('Type: iterable') }\n{% elif _dummy1.out is none %}\n{ action_respond_info('Type: none') }\n{% elif _dummy1.out is undefined %}\n{ action_respond_info('Type: undefined') }\n{% elif _dummy1.out is callable %}\n{ action_respond_info('Type: callable') }\n{% else %}\n{ action_respond_info('Type: unknown') }\n{% endif %}\n\n{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}\n{ action_respond_info('%s' % _dummy1.out|join(\"\\n\")) }\n{% else %}\n{ action_respond_info('%s' % _dummy1.out) }\n{% endif %}\n\n{% if _dummy0.break != 0 %}\n{ action_respond_info('\"printer.%s\" does not contain \"%s\"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }\n{% endif %}"},"exclude_object":{},"gcode_macro M486":{"gcode":"\n\n\n\n\n\n\n\n\n\n\n\n{% if 'exclude_object' not in printer %}\n{action_raise_error(\"[exclude_object] is not enabled\")}\n{% endif %}\n\n{% if 'T' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if 'C' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if 'P' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if 'S' in params %}\n{% if params.S == '-1' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if 'U' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}"},"bed_mesh default":{"version":"1","points":"\n-0.665000, -0.495000, -0.380000, -0.210000\n-0.412500, -0.222500, -0.082500, 0.095000\n-0.167500, 0.022500, 0.130000, 0.355000\n0.017500, 0.187500, 0.302500, 0.537500","x_count":"4","y_count":"4","mesh_x_pps":"2","mesh_y_pps":"2","algo":"bicubic","tension":"0.2","min_x":"10.0","max_x":"199.99","min_y":"10.0","max_y":"193.99"}},"warnings":[],"save_config_pending":false,"save_config_pending_items":{},"settings":{"mcu":{"serial":"/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0","baud":250000,"restart_method":"command","max_stepper_error":2.5e-05},"mcu rpi":{"serial":"/tmp/klipper_host_mcu","max_stepper_error":2.5e-05},"virtual_sdcard":{"path":"~/printer_data/gcodes","on_error_gcode":"CANCEL_PRINT"},"pause_resume":{"recover_velocity":25.0},"respond":{"default_type":"echo","default_prefix":">"},"gcode_macro cancel_print":{"gcode":"\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT","rename_existing":"BASE_CANCEL_PRINT","description":"Cancel the actual running print"},"gcode_macro pause":{"gcode":"\n\n{% set z = params.Z|default(25)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}\n\n\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info(\"Pause zhop exceeds maximum Z height.\") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000\nSAVE_GCODE_STATE NAME=PAUSEPARK\n\nSET_IDLE_TIMEOUT TIMEOUT=43200\n{% endif %}","rename_existing":"BASE_PAUSE","description":"Pause the actual running print"},"gcode_macro resume":{"gcode":"\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_FILAMENT_SENSOR SENSOR=e0_sensor ENABLE=1\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM109 S{etemp|int}\n{% endif %}\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\n{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}\nG1 Z{zhop * -1} E{e} F900\n{% else %}\nG1 Z{zhop * -1} F900\n{% endif %}\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nBASE_RESUME\n{% endif %}","rename_existing":"BASE_RESUME","description":"Resume the actual running print","variable_last_extruder_temp":"{'restore': False, 'temp': 0}","variable_restore_idle_timeout":"0","variable_idle_state":"False","variable_zhop":"0","variable_etemp":"0"},"gcode_macro set_pause_next_layer":{"gcode":"\n{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE=\"{{ 'enable': ENABLE, 'call': MACRO }}\"","description":"Enable a pause if the next layer is reached"},"gcode_macro set_pause_at_layer":{"gcode":"\n{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE=\"{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}\"","description":"Enable/disable a pause if a given layer number is reached"},"gcode_macro set_print_stats_info":{"gcode":"\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG='{\"%s, forced by pause_next_layer\" % pause_next_layer.call}'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG='{\"%s, forced by pause_at_layer [%d]\" % (pause_at_layer.call, pause_at_layer.layer)}'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}","rename_existing":"SET_PRINT_STATS_INFO_BASE","description":"Overwrite, to get pause_next_layer and pause_at_layer feature","variable_pause_next_layer":"{ 'enable': False, 'call': \"PAUSE\" }","variable_pause_at_layer":"{ 'enable': False, 'layer': 0, 'call': \"PAUSE\" }"},"gcode_macro _toolhead_park_pause_cancel":{"gcode":"\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if \"xyz\" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Printer not homed'\n{% endif %}","description":"Helper: park toolhead used in PAUSE and CANCEL_PRINT"},"gcode_macro _client_extrude":{"gcode":"\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='{\"\\\"%s\\\" not hot enough\" % printer.toolhead.extruder}'\n{% endif %}\n{% endif %}","description":"Extrudes, if the extruder is hot enough"},"gcode_macro _client_retract":{"gcode":"\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}","description":"Retracts, if the extruder is hot enough"},"gcode_macro get_timelapse_setup":{"gcode":"\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n{% set output_txt = [\"Timelapse Setup:\"] %}\n{% set _dummy = output_txt.append(\"enable: %s\" % tl.enable) %}\n{% set _dummy = output_txt.append(\"park: %s\" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append(\"park position: %s time: %s s\" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append(\"park cord x:%s y:%s dz:%s\" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append(\"travel speed: %s mm/s\" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append(\"fw_retract: %s\" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append(\"retract: %s mm speed: %s mm/s\" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append(\"extrude: %s mm speed: %s mm/s\" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append(\"verbose: %s\" % tl.verbose) %}\n{action_respond_info(output_txt|join(\"\\n\"))}","description":"Print the Timelapse setup"},"gcode_macro _set_timelapse_setup":{"gcode":"\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']\nelse False %}\n{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n'center': {'x': (max.x-(max.x-min.x)/2)|round(3),\n'y': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in ['true', 'false'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}\n{% else %}\n{action_raise_error(\"ENABLE=%s not supported. Allowed values are [True, False]\" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in ['true', 'false'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}\n{% else %}\n{action_raise_error(\"VERBOSE=%s not supported. Allowed values are [True, False]\" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"CUSTOM_POS_X=%s must be within [%s - %s]\" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"CUSTOM_POS_Y=%s must be within [%s - %s]\" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"CUSTOM_POS_DZ=%s must be within [%s - %s]\" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}\n{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}\n{% else %}\n{action_raise_error(\"PARK_ENABLE=%s not supported. Allowed values are [True, False]\" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom','x_only','y_only'] %}\n{% set dic = {'center'      : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },\n'front_left'  : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },\n'front_right' : {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },\n'back_left'   : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },\n'back_right'  : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },\n'custom'      : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz},\n'x_only'      : {'x': tl.park.custom.x, 'y': 'none'          , 'dz': tl.park.custom.dz},\n'y_only'      : {'x': 'none'          , 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error(\"PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]\"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"PARK_TIME=%s must be a positive number\" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE=\"{tl.park}\"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"TRAVEL_SPEED=%s must be larger than 0\" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"RETRACT_SPEED=%s must be larger than 0\" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"EXTRUDE_SPEED=%s must be larger than 0\" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE=\"{tl.speed}\"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"EXTRUDE_DISTANCE=%s must be specified as positiv number\" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"RETRACT_DISTANCE=%s must be specified as positiv number\" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in ['true', 'false'] %}\n{% if 'firmware_retraction' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({'fw_retract':False}) %}\n{% if params.FW_RETRACT|capitalize == 'True' %}\n{action_raise_error(\"[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract\")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error(\"FW_RETRACT=%s not supported. Allowed values are [True, False]\" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE=\"{tl.extruder}\"\n{% if printer.configfile.settings['gcode_macro pause'] is defined %}\n{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings['gcode_macro resume'] is defined %}\n{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE=\"{tl.macro}\"","description":"Set user parameters for timelapse"},"gcode_macro timelapse_take_frame":{"gcode":"\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}\n{% if enable %}\n{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or\n(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}\n{% if park.enable %}\n{% set pos = {'x': 'X' + park.coord.x|string if park.pos != 'y_only' else '',\n'y': 'Y' + park.coord.y|string if park.pos != 'x_only' else '',\n'z': 'Z'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,\n'extrude'    : printer.gcode_move.absolute_extrude},\n'speed'   : printer.gcode_move.speed,\n'e'       : printer.gcode_move.gcode_position.e,\n'factor'  : {'speed'  : printer.gcode_move.speed_factor,\n'extrude': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE=\"{restore}\"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info(\"Timelapse: Warning, minimum extruder temperature not reached!\")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if \"xyz\" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info(\"Timelapse: Warning, axis not homed yet!\")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info(\"Timelapse: disabled, take frame ignored\")}{% endif %}\n{% endif %}","description":"Take Timelapse shoot","variable_enable":"False","variable_takingframe":"False","variable_park":"{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}","variable_extruder":"{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}","variable_speed":"{'travel': 100,\n'retract': 15,\n'extrude': 15}","variable_verbose":"True","variable_check_time":"0.5","variable_restore":"{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}","variable_macro":"{'pause': 'PAUSE', 'resume': 'RESUME'}","variable_is_paused":"False"},"gcode_macro _timelapse_new_frame":{"gcode":"\n{action_call_remote_method(\"timelapse_newframe\",\nmacropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,\nhyperlapse=params.HYPERLAPSE)}","description":"action call for timelapse shoot. must be a seperate macro"},"delayed_gcode _wait_timelapse_take_frame":{"gcode":"\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info(\"Timelapse: Warning minimum extruder temperature not reached!\")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}","initial_duration":0.0},"gcode_macro hyperlapse":{"gcode":"\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == 'start' %}\n{action_respond_info(\"Hyperlapse: frames started (Cycle %d sec)\" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == 'stop' %}\n{% if run %}{action_respond_info(\"Hyperlapse: frames stopped\")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error(\"Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP\")}\n{% endif %}","description":"Start/Stop a hyperlapse recording","variable_cycle":"0","variable_run":"False"},"delayed_gcode _hyperlapse_loop":{"gcode":"\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer[\"gcode_macro HYPERLAPSE\"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True","initial_duration":0.0},"gcode_macro timelapse_render":{"gcode":"\n{action_respond_info(\"Timelapse: Rendering started\")}\n{action_call_remote_method(\"timelapse_render\", byrendermacro=\"True\")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings['gcode_macro pause'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5","description":"Render Timelapse video and wait for the result","variable_render":"False","variable_run_identifier":"0"},"delayed_gcode _wait_timelapse_render":{"gcode":"\n{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}\nM117 Rendering {['-','\\\\','|','/'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info(\"Timelapse: Rendering finished\")}\nM117\n{printer.configfile.settings['gcode_macro resume'].rename_existing}\n{% endif %}","initial_duration":0.0},"gcode_macro test_stream_delay":{"gcode":"\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error(\"Toolhead z %.3f to low. Please place head above z = 5.0\" % act.z)}\n{% endif %}","description":"Helper macro to find stream and park delay"},"verify_heater extruder":{"hysteresis":5.0,"max_error":600.0,"heating_gain":2.0,"check_gain_time":45.0},"heater_bed":{"sensor_type":"EPCOS 100K B57560G104F","pullup_resistor":4700.0,"inline_resistor":0.0,"sensor_pin":"PC4","min_temp":0.0,"max_temp":110.0,"min_extrude_temp":170.0,"max_power":1.0,"smooth_time":1.0,"control":"pid","pid_kp":72.339,"pid_ki":1.347,"pid_kd":971.155,"heater_pin":"PA7","pwm_cycle_time":0.1},"verify_heater heater_bed":{"hysteresis":5.0,"max_error":120.0,"heating_gain":2.0,"check_gain_time":60.0},"heater_fan hotend_fan":{"heater":["extruder"],"heater_temp":50.0,"max_power":1.0,"kick_start_time":0.1,"off_below":0.0,"cycle_time":0.01,"hardware_pwm":false,"shutdown_speed":1.0,"pin":"PC0","fan_speed":1.0},"fan":{"max_power":1.0,"kick_start_time":0.1,"off_below":0.0,"cycle_time":0.01,"hardware_pwm":false,"shutdown_speed":0.0,"pin":"PA0"},"bltouch":{"z_offset":3.16,"stow_on_each_sample":false,"probe_with_touch_mode":true,"control_pin":"PC13","sensor_pin":"^PC14","pin_up_reports_not_triggered":true,"pin_up_touch_mode_reports_triggered":true,"pin_move_time":0.68,"x_offset":-31.8,"y_offset":-40.5,"speed":5.0,"lift_speed":5.0,"samples":1,"sample_retract_dist":2.0,"samples_result":"average","samples_tolerance":0.1,"samples_tolerance_retries":0},"bed_mesh":{"adaptive_margin":0.0,"probe_count":[4,4],"mesh_min":[10.0,10.0],"mesh_max":[200.0,194.0],"mesh_pps":[2,2],"algorithm":"bicubic","bicubic_tension":0.2,"scan_overshoot":0,"horizontal_move_z":5.0,"speed":120.0,"fade_start":1.0,"fade_end":0.0,"split_delta_z":0.025,"move_check_distance":5.0},"bed_mesh default":{"version":1,"points":[[-0.665,-0.495,-0.38,-0.21],[-0.4125,-0.2225,-0.0825,0.095],[-0.1675,0.0225,0.13,0.355],[0.0175,0.1875,0.3025,0.5375]],"min_x":10.0,"max_x":199.99,"min_y":10.0,"max_y":193.99,"x_count":4,"y_count":4,"mesh_x_pps":2,"mesh_y_pps":2,"algo":"bicubic","tension":0.2},"bed_screws":{"screw1":[20.0,29.0],"screw1_name":"screw at 20.000,29.000","screw2":[195.0,29.0],"screw2_name":"screw at 195.000,29.000","screw3":[195.0,198.0],"screw3_name":"screw at 195.000,198.000","screw4":[20.0,198.0],"screw4_name":"screw at 20.000,198.000","speed":50.0,"probe_speed":5.0,"horizontal_move_z":5.0,"probe_height":0.0},"safe_z_home":{"home_xy_position":[147.0,154.0],"z_hop":10.0,"z_hop_speed":5.0,"speed":75.0,"move_to_previous":false},"filament_switch_sensor e0_sensor":{"switch_pin":"!PC15","pause_on_runout":true,"runout_gcode":"PAUSE_RUNOUT","pause_delay":0.5,"event_delay":3.0},"temperature_sensor stm32f401l":{"sensor_type":"temperature_mcu","sensor_mcu":"mcu","sensor_temperature1":26.0,"sensor_adc1":0.244261,"min_temp":0.0,"max_temp":200.0},"input_shaper":{"shaper_type":"mzv","shaper_type_x":"mzv","damping_ratio_x":0.1,"shaper_freq_x":39.0,"shaper_type_y":"mzv","damping_ratio_y":0.1,"shaper_freq_y":41.6},"led led_strip":{"cycle_time":0.0005,"hardware_pwm":true,"white_pin":"rpi:pwmchip0/pwm0","initial_red":0.0,"initial_green":0.0,"initial_blue":0.0,"initial_white":0.0},"state_notify":{"inactive_timeout":20.0,"heaters_active":false,"on_idle_gcode":"","on_ready_gcode":"\n\n\nSET_LED LED=led_strip WHITE=0.5","on_active_gcode":"\n\n\nSET_LED LED=led_strip WHITE=0.8","on_inactive_gcode":"\n\n\nSET_LED LED=led_strip WHITE=0.15"},"idle_timeout":{"timeout":480.0,"gcode":"\nTURN_OFF_HEATERS\nM84\nM107\nG4 P20000\nSET_LED LED=led_strip WHITE=0.0\nG4 P500\nPOWER_OFF_PRINTER"},"gcode_macro state_notify":{"gcode":"\nSTATE_NOTIFY_STATE","description":"Display the state_notify state"},"gcode_macro power_off_printer":{"gcode":"\n{action_call_remote_method(\"set_device_power\", device=\"printer\", state=\"off\")}","description":"G-Code macro"},"force_move":{"enable_force_move":true},"gcode_macro pause_runout":{"gcode":"\n\n{% set z = params.Z|default(25)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}\n\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{ action_respond_info(\"Filament ran out, pausing for change.\") }\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info(\"Pause zhop exceeds maximum Z height.\") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=43200\n{% endif %}","description":"G-Code macro"},"gcode_macro m600":{"gcode":"\n{% set X = 110 %}\n{% set Y = 0 %}\n\n\nSET_FILAMENT_SENSOR SENSOR=e0_sensor ENABLE=0\nPAUSE\nG91\nG1 E-.8 F2700\n\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-100 F1000\n{ action_respond_info(\"Filament change, resume after.\") }","description":"G-Code macro"},"gcode_macro force_move_down":{"gcode":"\nFORCE_MOVE STEPPER=stepper_z DISTANCE=-80 VELOCITY=5","description":"G-Code macro"},"gcode_macro force_move_up":{"gcode":"\nFORCE_MOVE STEPPER=stepper_z DISTANCE=20 VELOCITY=5","description":"G-Code macro"},"gcode_macro reasonable_accel":{"gcode":"\nSET_VELOCITY_LIMIT ACCEL=2800","description":"G-Code macro"},"gcode_macro m117":{"gcode":"\nM117.1 {rawparams}\n{action_respond_info(\"> \"+rawparams)}","rename_existing":"M117.1","description":"G-Code macro"},"gcode_macro m900":{"gcode":"\n{% if params.K is defined %}\n{% set K = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={K}\n{% endif %}","description":"G-Code macro"},"gcode_macro bed_mesh_calibrate_automatic":{"gcode":"\n{% set TARGET_TEMP = params.TARGET_TEMP | default(60, true) | float %}\nBED_PREHEAT TARGET_TEMP={TARGET_TEMP}\nHOME_PRINTER\nBED_MESH_CALIBRATE","description":"Automatic Bed Mesh Calibrate"},"gcode_macro screws_tilt_calibrate":{"gcode":"\n{% set TARGET_TEMP = params.TARGET_TEMP | default(60, true) | float %}\nBED_PREHEAT TARGET_TEMP={TARGET_TEMP}\nHOME_PRINTER\nSCREWS_TILT_CALCULATE","description":"Automatic Screw Tilt Calibrate"},"gcode_macro m109":{"gcode":"\n\n{% set s = params.S|float %}\n\nM104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}\n{% if s != 0 %}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}\n{% endif %}","rename_existing":"M99109","description":"G-Code macro"},"gcode_macro m190":{"gcode":"\n\n{% set s = params.S|float %}\n\nM140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}\n{% if s != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}\n{% endif %}","rename_existing":"M99190","description":"G-Code macro"},"gcode_macro dump_variables":{"gcode":"\n{% set filter_name = params.NAME|default('')|string|lower %}\n{% set filter_value = params.VALUE|default('')|string|lower %}\n{% set show_cfg = params.SHOW_CFG|default(0)|int %}\n\n{% set out = [] %}\n\n{% for key1 in printer %}\n{% for key2 in printer[key1] %}\n{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}\n{% set dummy = out.append(\"printer['%s'].%s = %s\" % (key1, key2, printer[key1][key2])) %}\n{% endif %}\n{% else %}\n{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}\n{% set dummy = out.append(\"printer['%s'] = %s\" % (key1, printer[key1])) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n{action_respond_info(out|join(\"\\n\"))}","description":"G-Code macro"},"gcode_macro get_variable":{"gcode":"\n{% set names = (params.NAME).split('.')|list %}\n{% set join = (params.JOIN)|default(1)|int %}\n\n{% set _dummy0 = namespace( break = 0 ) %}\n{% set _dummy1 = namespace( out = printer[names|first] ) %}\n\n{% for name in names if _dummy0.break == 0 %}\n{% if loop.index > 1 %}\n{% if name in _dummy1.out %}\n{% set _dummy1.out = _dummy1.out[name] %}\n{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}\n{% set _dummy1.out = _dummy1.out[name|int] %}\n{% else %}\n{% set _dummy0.break = loop.index0 %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if _dummy1.out is boolean %}\n{ action_respond_info('Type: boolean') }\n{% elif _dummy1.out is float %}\n{ action_respond_info('Type: float') }\n{% elif _dummy1.out is integer %}\n{ action_respond_info('Type: integer') }\n{% elif _dummy1.out is mapping %}\n{ action_respond_info('Type: mapping') }\n{% elif _dummy1.out is string %}\n{ action_respond_info('Type: string') }\n{% elif _dummy1.out is iterable %}\n{ action_respond_info('Type: iterable') }\n{% elif _dummy1.out is none %}\n{ action_respond_info('Type: none') }\n{% elif _dummy1.out is undefined %}\n{ action_respond_info('Type: undefined') }\n{% elif _dummy1.out is callable %}\n{ action_respond_info('Type: callable') }\n{% else %}\n{ action_respond_info('Type: unknown') }\n{% endif %}\n\n{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}\n{ action_respond_info('%s' % _dummy1.out|join(\"\\n\")) }\n{% else %}\n{ action_respond_info('%s' % _dummy1.out) }\n{% endif %}\n\n{% if _dummy0.break != 0 %}\n{ action_respond_info('\"printer.%s\" does not contain \"%s\"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }\n{% endif %}","description":"G-Code macro"},"gcode_macro m486":{"gcode":"\n\n\n\n\n\n\n\n\n\n\n\n{% if 'exclude_object' not in printer %}\n{action_raise_error(\"[exclude_object] is not enabled\")}\n{% endif %}\n\n{% if 'T' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if 'C' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if 'P' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if 'S' in params %}\n{% if params.S == '-1' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if 'U' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}","description":"G-Code macro"},"printer":{"max_velocity":300.0,"max_accel":3950.0,"minimum_cruise_ratio":0.5,"square_corner_velocity":2.0,"kinematics":"cartesian","max_z_velocity":5.0,"max_z_accel":100.0},"stepper_x":{"step_pin":"PC2","dir_pin":"PB9","rotation_distance":40.0,"microsteps":16,"full_steps_per_rotation":200,"gear_ratio":[],"enable_pin":"!PC3","endstop_pin":"!PA5","position_endstop":-10.0,"position_min":-15.0,"position_max":235.0,"homing_speed":50.0,"second_homing_speed":25.0,"homing_retract_speed":50.0,"homing_retract_dist":5.0,"homing_positive_dir":false},"stepper_y":{"step_pin":"PB8","dir_pin":"PB7","rotation_distance":40.0,"microsteps":16,"full_steps_per_rotation":200,"gear_ratio":[],"enable_pin":"!PC3","endstop_pin":"!PA6","position_endstop":-8.0,"position_min":-13.0,"position_max":238.0,"homing_speed":50.0,"second_homing_speed":25.0,"homing_retract_speed":50.0,"homing_retract_dist":5.0,"homing_positive_dir":false},"stepper_z":{"step_pin":"PB6","dir_pin":"!PB5","rotation_distance":8.0,"microsteps":16,"full_steps_per_rotation":200,"gear_ratio":[],"enable_pin":"!PC3","endstop_pin":"probe:z_virtual_endstop","position_min":-4.0,"position_max":270.0,"homing_speed":5.0,"second_homing_speed":2.5,"homing_retract_speed":5.0,"homing_retract_dist":5.0,"homing_positive_dir":false},"extruder":{"sensor_type":"EPCOS 100K B57560G104F","pullup_resistor":4700.0,"inline_resistor":0.0,"sensor_pin":"PC5","min_temp":0.0,"max_temp":280.0,"min_extrude_temp":170.0,"max_power":1.0,"smooth_time":2.0,"control":"pid","pid_kp":24.178,"pid_ki":1.414,"pid_kd":103.361,"heater_pin":"PA1","pwm_cycle_time":0.1,"nozzle_diameter":0.4,"filament_diameter":1.75,"max_extrude_cross_section":50.0,"max_extrude_only_velocity":79.82432411074329,"max_extrude_only_accel":1051.0202674581199,"max_extrude_only_distance":101.0,"instantaneous_corner_velocity":1.0,"step_pin":"PB4","pressure_advance":0.02,"pressure_advance_smooth_time":0.04,"dir_pin":"PB3","rotation_distance":26.359,"microsteps":16,"full_steps_per_rotation":200,"gear_ratio":[[42.0,12.0]],"enable_pin":"!PC3"}}},"mcu":{"mcu_version":"v0.12.0-85-gd785b396a","mcu_build_versions":"gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2","mcu_constants":{"ADC_MAX":4095,"BUS_PINS_i2c1":"PB6,PB7","BUS_PINS_i2c1a":"PB8,PB9","BUS_PINS_i2c2":"PB10,PB11","BUS_PINS_i2c3":"PA8,PC9","BUS_PINS_sdio":"PC12,PD2,PC8,PC9,PC10,PC11","BUS_PINS_spi1":"PA6,PA7,PA5","BUS_PINS_spi1a":"PB4,PB5,PB3","BUS_PINS_spi2":"PB14,PB15,PB13","BUS_PINS_spi2a":"PC2,PC3,PB10","BUS_PINS_spi3":"PB4,PB5,PB3","BUS_PINS_spi3a":"PC11,PC12,PC10","BUS_PINS_spi4":"PE13,PE14,PE12","CLOCK_FREQ":84000000,"MCU":"stm32f401xc","PWM_MAX":255,"RECEIVE_WINDOW":192,"RESERVE_PINS_crystal":"PH0,PH1","RESERVE_PINS_serial":"PA10,PA9","SERIAL_BAUD":250000,"STATS_SUMSQ_BASE":256,"STEPPER_BOTH_EDGE":1},"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.2e-05,"mcu_task_stddev":7e-06,"bytes_write":1413,"bytes_read":8137,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":157,"receive_seq":157,"retransmit_seq":0,"srtt":0.004,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000270}},"mcu rpi":{"mcu_version":"v0.12.0-85-gd785b396a","mcu_build_versions":"gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2","mcu_constants":{"ADC_MAX":4095,"CLOCK_FREQ":50000000,"MCU":"linux","PCA9685_MAX":4096,"PWM_MAX":32768,"STATS_SUMSQ_BASE":256},"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.8e-05,"mcu_task_stddev":3.5e-05,"bytes_write":993,"bytes_read":25424,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":126,"receive_seq":126,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000234,"adj":49999950}},"gcode_move":{"speed_factor":1.0,"speed":1500.0,"extrude_factor":1.0,"absolute_coordinates":true,"absolute_extrude":true,"homing_origin":[0.0,0.0,0.0,0.0],"position":[0.0,0.0,0.0,0.0],"gcode_position":[0.0,0.0,0.0,0.0]},"print_stats":{"filename":"","total_duration":0.0,"print_duration":0.0,"filament_used":0.0,"state":"standby","message":"","info":{"total_layer":null,"current_layer":null}},"virtual_sdcard":{"file_path":null,"progress":0.0,"is_active":false,"file_position":0,"file_size":0},"pause_resume":{"is_paused":false},"display_status":{"progress":0.0,"message":null},"gcode_macro CANCEL_PRINT":{},"gcode_macro PAUSE":{},"gcode_macro RESUME":{"last_extruder_temp":{"restore":false,"temp":0},"restore_idle_timeout":0,"idle_state":false,"zhop":0,"etemp":0},"gcode_macro SET_PAUSE_NEXT_LAYER":{},"gcode_macro SET_PAUSE_AT_LAYER":{},"gcode_macro SET_PRINT_STATS_INFO":{"pause_next_layer":{"enable":false,"call":"PAUSE"},"pause_at_layer":{"enable":false,"layer":0,"call":"PAUSE"}},"gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL":{},"gcode_macro _CLIENT_EXTRUDE":{},"gcode_macro _CLIENT_RETRACT":{},"gcode_macro GET_TIMELAPSE_SETUP":{},"gcode_macro _SET_TIMELAPSE_SETUP":{},"gcode_macro TIMELAPSE_TAKE_FRAME":{"enable":false,"takingframe":false,"park":{"enable":false,"pos":"back_left","time":0.1,"custom":{"x":10.0,"y":10.0,"dz":0.0},"coord":{"x":-15.0,"y":238.0,"dz":0}},"extruder":{"fw_retract":false,"retract":1.0,"extrude":1.0},"speed":{"travel":100.0,"retract":15.0,"extrude":15.0},"verbose":false,"check_time":0.5,"restore":{"absolute":{"coordinates":true,"extrude":true},"speed":1500,"e":0,"factor":{"speed":1.0,"extrude":1.0}},"macro":{"pause":"BASE_PAUSE","resume":"BASE_RESUME"},"is_paused":false},"gcode_macro _TIMELAPSE_NEW_FRAME":{},"gcode_macro HYPERLAPSE":{"cycle":0,"run":false},"gcode_macro TIMELAPSE_RENDER":{"render":false,"run_identifier":0},"gcode_macro TEST_STREAM_DELAY":{},"heaters":{"available_heaters":["heater_bed","extruder"],"available_sensors":["heater_bed","temperature_sensor STM32F401L","extruder"],"available_monitors":[]},"heater_bed":{"temperature":23.83,"target":0.0,"power":0.0},"heater_fan hotend_fan":{"speed":0.0,"rpm":null},"fan":{"speed":0.0,"rpm":null},"probe":{"name":"bltouch","last_query":false,"last_z_result":0.0},"bltouch":{"name":"bltouch","last_query":false,"last_z_result":0.0},"bed_mesh":{"profile_name":"","mesh_min":[0.0,0.0],"mesh_max":[0.0,0.0],"probed_matrix":[[]],"mesh_matrix":[[]],"profiles":{"default":{"points":[[-0.665,-0.495,-0.38,-0.21],[-0.4125,-0.2225,-0.0825,0.095],[-0.1675,0.0225,0.13,0.355],[0.0175,0.1875,0.3025,0.5375]],"mesh_params":{"min_x":10.0,"max_x":199.99,"min_y":10.0,"max_y":193.99,"x_count":4,"y_count":4,"mesh_x_pps":2,"mesh_y_pps":2,"algo":"bicubic","tension":0.2}}}},"bed_screws":{"is_active":false,"state":null,"current_screw":0,"accepted_screws":0},"filament_switch_sensor e0_sensor":{"filament_detected":false,"enabled":true},"temperature_sensor STM32F401L":{"temperature":26.52,"measured_min_temp":26.12,"measured_max_temp":26.61},"led led_strip":{"color_data":[[0.0,0.0,0.0,0.15]]},"idle_timeout":{"state":"Printing","printing_time":0.2803586450172588},"state_notify":{"state":"inactive","inactive_timeout":20.0},"gcode_macro STATE_NOTIFY":{},"gcode_macro POWER_OFF_PRINTER":{},"gcode_macro PAUSE_RUNOUT":{},"gcode_macro M600":{},"gcode_macro FORCE_MOVE_DOWN":{},"gcode_macro FORCE_MOVE_UP":{},"gcode_macro REASONABLE_ACCEL":{},"gcode_macro M117":{},"gcode_macro M900":{},"gcode_macro BED_MESH_CALIBRATE_AUTOMATIC":{},"gcode_macro SCREWS_TILT_CALIBRATE":{},"gcode_macro M109":{},"gcode_macro M190":{},"gcode_macro DUMP_VARIABLES":{},"gcode_macro GET_VARIABLE":{},"exclude_object":{"objects":[],"excluded_objects":[],"current_object":null},"gcode_macro M486":{},"stepper_enable":{"steppers":{"stepper_x":false,"stepper_y":false,"stepper_z":false,"extruder":false}},"motion_report":{"live_position":[0.0,0.0,0.0,0.0],"live_velocity":0.0,"live_extruder_velocity":0.0,"steppers":["extruder","stepper_x","stepper_y","stepper_z"],"trapq":["extruder","toolhead"]},"query_endstops":{"last_query":{}},"system_stats":{"sysload":0.34,"cputime":5.045450391,"memavail":188232},"manual_probe":{"is_active":false,"z_position":null,"z_position_lower":null,"z_position_upper":null},"toolhead":{"homed_axes":"","axis_minimum":[-15.0,-13.0,-4.0,0.0],"axis_maximum":[235.0,238.0,270.0,0.0],"print_time":27.52611561904762,"stalls":0,"estimated_print_time":27.556475166666665,"extruder":"extruder","position":[0.0,0.0,0.0,0.0],"max_velocity":300.0,"max_accel":3950.0,"minimum_cruise_ratio":0.5,"square_corner_velocity":2.0},"extruder":{"temperature":24.25,"target":0.0,"power":0.0,"can_extrude":false,"pressure_advance":0.02,"smooth_time":0.04,"motion_queue":null}},"subscriptions":{"trapq:extruder":{"header":["time","duration","start_velocity","acceleration","start_position","direction"]},"trapq:toolhead":{"header":["time","duration","start_velocity","acceleration","start_position","direction"]},"stepq:extruder":{"header":["interval","count","add"]},"stepq:stepper_x":{"header":["interval","count","add"]},"stepq:stepper_y":{"header":["interval","count","add"]},"stepq:stepper_z":{"header":["interval","count","add"]}},"file_position":16763}{"status":{"temperature_sensor STM32F401L":{"temperature":26.56,"measured_max_temp":26.65},"idle_timeout":{"printing_time":0.0,"state":"Ready"},"toolhead":{"estimated_print_time":32.57337177380953},"mcu":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.2e-05,"mcu_task_stddev":8e-06,"bytes_write":1443,"bytes_read":8979,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":162,"receive_seq":162,"retransmit_seq":0,"srtt":0.004,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000201}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.3e-05,"mcu_task_stddev":2.4e-05,"bytes_write":1023,"bytes_read":25517,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":131,"receive_seq":131,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000110,"adj":49999718}},"heater_bed":{"temperature":23.85},"system_stats":{"sysload":0.31,"cputime":5.214966947,"memavail":185280},"extruder":{"temperature":24.24}},"file_position":18162}{"status":{"temperature_sensor STM32F401L":{"temperature":26.56,"measured_max_temp":26.73},"toolhead":{"estimated_print_time":37.59108988095238},"extruder":{"temperature":24.25},"heater_bed":{"temperature":23.82},"mcu":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.2e-05,"mcu_task_stddev":8e-06,"bytes_write":1473,"bytes_read":9792,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":167,"receive_seq":167,"retransmit_seq":0,"srtt":0.004,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000180}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.4e-05,"mcu_task_stddev":3.1e-05,"bytes_write":1066,"bytes_read":25615,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":137,"receive_seq":137,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000117,"adj":49999843}},"system_stats":{"sysload":0.28,"cputime":5.426063977,"memavail":184556},"led led_strip":{"color_data":[[0.0,0.0,0.0,0.0]]}},"file_position":19306}{"status":{"heater_bed":{"temperature":23.84},"temperature_sensor STM32F401L":{"temperature":26.61,"measured_max_temp":27.37},"toolhead":{"estimated_print_time":42.60675771428571,"homed_axes":"x","print_time":43.039611394514786,"position":[-10.0,0.0,10.0,0.0]},"extruder":{"temperature":24.3},"mcu":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.3e-05,"mcu_task_stddev":1e-05,"bytes_write":1965,"bytes_read":10760,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":189,"receive_seq":189,"retransmit_seq":0,"srtt":0.003,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000200}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.6e-05,"mcu_task_stddev":2.9e-05,"bytes_write":1096,"bytes_read":25708,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":142,"receive_seq":142,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000129,"adj":49999895}},"system_stats":{"sysload":0.26,"cputime":5.687837892,"memavail":184564},"gcode_move":{"position":[0.0,0.0,10.0,0.0],"gcode_position":[0.0,0.0,10.0,0.0]},"idle_timeout":{"state":"Printing","printing_time":2.843133332004072},"state_notify":{"state":"active"},"stepper_enable":{"steppers":{"stepper_x":true,"stepper_y":false,"stepper_z":true,"extruder":false}},"motion_report":{"live_position":[333.7090170057265,0.0,10.0,0.0],"live_velocity":50.0}},"file_position":21542}{"status":{"temperature_sensor STM32F401L":{"temperature":27.17},"idle_timeout":{"printing_time":7.858831246994669},"motion_report":{"live_position":[-10.0,2.0,10.0,0.0],"live_velocity":0.0},"toolhead":{"estimated_print_time":47.622447642857146,"print_time":47.830927906419525,"homed_axes":"xy","position":[-10.0,-8.0,10.0,0.0]},"heater_bed":{"temperature":23.94},"extruder":{"temperature":24.32},"gcode_move":{"position":[-10.0,2.0,10.0,0.0],"gcode_position":[-10.0,2.0,10.0,0.0]},"mcu":{"last_stats":{"mcu_awake":0.004,"mcu_task_avg":1.6e-05,"mcu_task_stddev":7e-06,"bytes_write":4430,"bytes_read":13342,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":359,"receive_seq":359,"retransmit_seq":0,"srtt":0.004,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000151}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.5e-05,"mcu_task_stddev":3.1e-05,"bytes_write":1126,"bytes_read":25801,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":147,"receive_seq":147,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000184,"adj":50000377}},"stepper_enable":{"steppers":{"stepper_x":true,"stepper_y":true,"stepper_z":true,"extruder":false}},"system_stats":{"sysload":0.24,"cputime":6.140577571,"memavail":183700}},"file_position":24366}{"status":{"gcode_move":{"position":[147.0,154.0,403.42,0.0],"gcode_position":[147.0,154.0,403.42,0.0]},"heater_bed":{"temperature":23.84},"temperature_sensor STM32F401L":{"temperature":26.65,"measured_max_temp":27.57},"idle_timeout":{"printing_time":12.880131088983035},"motion_report":{"live_position":[147.0,154.0,403.42,0.0],"live_velocity":0.0},"toolhead":{"homed_axes":"xyz","print_time":53.14332477380953,"estimated_print_time":52.64376710714286,"position":[147.0,154.0,3.16,0.0]},"extruder":{"temperature":24.27},"mcu":{"last_stats":{"mcu_awake":0.004,"mcu_task_avg":1.6e-05,"mcu_task_stddev":9e-06,"bytes_write":5269,"bytes_read":14492,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":397,"receive_seq":397,"retransmit_seq":0,"srtt":0.003,"rttvar":0.0,"rto":0.025,"ready_bytes":46,"upcoming_bytes":18,"freq":84000175}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.6e-05,"mcu_task_stddev":3.4e-05,"bytes_write":1156,"bytes_read":25891,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":152,"receive_seq":152,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000151,"adj":49999911}},"system_stats":{"sysload":0.22,"cputime":6.438110009,"memavail":183708}},"file_position":27455}{"status":{"temperature_sensor STM32F401L":{"temperature":27.41},"idle_timeout":{"printing_time":17.894549836986698},"toolhead":{"estimated_print_time":57.65817811904762,"print_time":57.843324773809265},"extruder":{"temperature":24.26},"heater_bed":{"temperature":23.82},"motion_report":{"live_position":[147.0,154.0,403.295,0.0],"live_velocity":5.0},"mcu":{"last_stats":{"mcu_awake":0.004,"mcu_task_avg":1.6e-05,"mcu_task_stddev":6e-06,"bytes_write":7241,"bytes_read":16814,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":544,"receive_seq":544,"retransmit_seq":0,"srtt":0.003,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000136}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.5e-05,"mcu_task_stddev":3.2e-05,"bytes_write":1186,"bytes_read":25982,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":157,"receive_seq":157,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000122,"adj":49999880}},"system_stats":{"sysload":0.2,"cputime":6.835658761,"memavail":183736}},"file_position":29533}{"status":{"heater_bed":{"temperature":23.83},"idle_timeout":{"printing_time":22.90798212698428},"toolhead":{"print_time":62.84332477380898,"estimated_print_time":62.67161919047619},"temperature_sensor STM32F401L":{"temperature":27.49,"measured_max_temp":27.65},"mcu":{"last_stats":{"mcu_awake":0.005,"mcu_task_avg":1.6e-05,"mcu_task_stddev":5e-06,"bytes_write":9365,"bytes_read":19400,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":714,"receive_seq":713,"retransmit_seq":0,"srtt":0.003,"rttvar":0.001,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000140}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.5e-05,"mcu_task_stddev":3e-05,"bytes_write":1222,"bytes_read":26091,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":163,"receive_seq":163,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000126,"adj":50000047}},"system_stats":{"sysload":0.19,"cputime":7.267971057},"extruder":{"temperature":24.25}},"file_position":31444}{"status":{"temperature_sensor STM32F401L":{"temperature":27.73,"measured_max_temp":27.73},"idle_timeout":{"printing_time":27.922931551991496},"toolhead":{"print_time":67.8933247738087,"estimated_print_time":67.68657079761904},"heater_bed":{"temperature":23.82},"mcu":{"last_stats":{"mcu_awake":0.005,"mcu_task_avg":1.6e-05,"mcu_task_stddev":5e-06,"bytes_write":11475,"bytes_read":21982,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":881,"receive_seq":881,"retransmit_seq":0,"srtt":0.003,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000128}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.7e-05,"mcu_task_stddev":3.4e-05,"bytes_write":1252,"bytes_read":26184,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":168,"receive_seq":168,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000113,"adj":49999963}},"system_stats":{"sysload":0.17,"cputime":7.693332886,"memavail":183624},"extruder":{"temperature":24.24}},"file_position":33365}{"status":{"idle_timeout":{"printing_time":32.9401266539935},"toolhead":{"print_time":72.89332477380842,"estimated_print_time":72.70378971428572},"extruder":{"temperature":24.24},"temperature_sensor STM32F401L":{"temperature":27.73,"measured_max_temp":27.94},"heater_bed":{"temperature":23.87},"mcu":{"last_stats":{"mcu_awake":0.005,"mcu_task_avg":1.6e-05,"mcu_task_stddev":5e-06,"bytes_write":13585,"bytes_read":24555,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":1048,"receive_seq":1048,"retransmit_seq":0,"srtt":0.003,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000156}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.4e-05,"mcu_task_stddev":2.7e-05,"bytes_write":1282,"bytes_read":26277,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":173,"receive_seq":173,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000127,"adj":50000035}},"system_stats":{"sysload":0.16,"cputime":8.120785585}},"file_position":35260}{"status":{"temperature_sensor STM32F401L":{"temperature":27.98,"measured_max_temp":28.22},"idle_timeout":{"printing_time":37.95404357899679},"toolhead":{"print_time":77.89332477380813,"estimated_print_time":77.71770261904761},"extruder":{"temperature":24.26},"heater_bed":{"temperature":23.89},"mcu":{"last_stats":{"mcu_awake":0.005,"mcu_task_avg":1.6e-05,"mcu_task_stddev":5e-06,"bytes_write":15679,"bytes_read":27116,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":1212,"receive_seq":1212,"retransmit_seq":0,"srtt":0.003,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000132}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.6e-05,"mcu_task_stddev":3.3e-05,"bytes_write":1312,"bytes_read":26370,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":178,"receive_seq":178,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000130,"adj":50000146}},"system_stats":{"sysload":0.14,"cputime":8.544694441,"memavail":183428}},"file_position":37158}{"status":{"heater_bed":{"temperature":23.86},"idle_timeout":{"printing_time":42.968392691982444},"toolhead":{"print_time":82.94332477380784,"estimated_print_time":82.73205083333333},"extruder":{"temperature":24.24},"temperature_sensor STM32F401L":{"temperature":27.98},"mcu":{"last_stats":{"mcu_awake":0.005,"mcu_task_avg":1.6e-05,"mcu_task_stddev":5e-06,"bytes_write":17806,"bytes_read":29717,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":1381,"receive_seq":1381,"retransmit_seq":0,"srtt":0.003,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000117}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.4e-05,"mcu_task_stddev":2.8e-05,"bytes_write":1342,"bytes_read":26463,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":183,"receive_seq":183,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000120,"adj":50000071}},"system_stats":{"sysload":0.13,"cputime":8.968442413}},"file_position":39039}{"status":{"heater_bed":{"temperature":23.86},"temperature_sensor STM32F401L":{"temperature":28.34,"measured_max_temp":28.34},"idle_timeout":{"printing_time":47.98235956497956},"toolhead":{"print_time":88.4649474642857,"estimated_print_time":87.74601279761904},"mcu":{"last_stats":{"mcu_awake":0.006,"mcu_task_avg":1.6e-05,"mcu_task_stddev":5e-06,"bytes_write":19959,"bytes_read":32229,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":1543,"receive_seq":1543,"retransmit_seq":0,"srtt":0.004,"rttvar":0.001,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000097}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.4e-05,"mcu_task_stddev":2.6e-05,"bytes_write":1372,"bytes_read":26556,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":188,"receive_seq":188,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000097,"adj":50000007}},"system_stats":{"sysload":0.12,"cputime":9.276806113,"memavail":183444},"extruder":{"temperature":24.23},"gcode_move":{"position":[147.0,154.0,13.16,0.0],"gcode_position":[147.0,154.0,13.16,0.0]},"motion_report":{"live_position":[147.0,154.0,5.095326666666669,0.0],"live_velocity":5.0}},"file_position":41320}{"status":{"temperature_sensor STM32F401L":{"temperature":28.46,"measured_max_temp":28.5},"idle_timeout":{"printing_time":52.99814602200058},"motion_report":{"live_position":[147.0,154.0,6.957657500000014,0.0],"live_velocity":5.0},"toolhead":{"estimated_print_time":92.76213735714286,"print_time":93.39560585714285,"position":[147.0,154.0,10.0,0.0]},"extruder":{"temperature":24.26},"heater_bed":{"temperature":23.83},"mcu":{"last_stats":{"mcu_awake":0.004,"mcu_task_avg":1.6e-05,"mcu_task_stddev":7e-06,"bytes_write":21147,"bytes_read":33975,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":1630,"receive_seq":1630,"retransmit_seq":0,"srtt":0.003,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000091}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.2e-05,"mcu_task_stddev":2.4e-05,"bytes_write":1412,"bytes_read":26649,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":193,"receive_seq":193,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000096,"adj":49996473}},"system_stats":{"sysload":0.11,"cputime":9.588929235,"memavail":183452},"gcode_move":{"position":[147.0,154.0,10.0,0.0],"gcode_position":[147.0,154.0,10.0,0.0]},"led led_strip":{"color_data":[[0.0,0.0,0.0,0.8]]}},"file_position":43680}{"status":{"heater_bed":{"temperature":23.82},"temperature_sensor STM32F401L":{"temperature":28.14,"measured_max_temp":28.62},"idle_timeout":{"printing_time":0.0,"state":"Ready"},"motion_report":{"live_position":[147.0,154.0,10.0,0.0],"live_velocity":0.0},"toolhead":{"estimated_print_time":97.77991077380952},"extruder":{"temperature":24.23},"mcu":{"last_stats":{"mcu_awake":0.002,"mcu_task_avg":1.3e-05,"mcu_task_stddev":8e-06,"bytes_write":21249,"bytes_read":34812,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":1637,"receive_seq":1637,"retransmit_seq":0,"srtt":0.004,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000082}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.2e-05,"mcu_task_stddev":2.5e-05,"bytes_write":1442,"bytes_read":26742,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":198,"receive_seq":198,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000078,"adj":49999143}},"system_stats":{"sysload":0.1,"cputime":9.742709131,"memavail":183460},"led led_strip":{"color_data":[[0.0,0.0,0.0,0.0]]}},"file_position":45200}{"status":{"toolhead":{"estimated_print_time":102.79797776190476,"position":[147.0,154.0,60.0,0.0],"print_time":110.68553592857143},"extruder":{"temperature":24.29},"heater_bed":{"temperature":23.89},"temperature_sensor STM32F401L":{"temperature":28.74,"measured_max_temp":28.9},"mcu":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.3e-05,"mcu_task_stddev":9e-06,"bytes_write":21539,"bytes_read":35658,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":1646,"receive_seq":1646,"retransmit_seq":0,"srtt":0.003,"rttvar":0.001,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000088}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.3e-05,"mcu_task_stddev":2.5e-05,"bytes_write":1485,"bytes_read":26840,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":204,"receive_seq":204,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000095,"adj":50000150}},"system_stats":{"sysload":0.09,"cputime":9.950105481,"memavail":183488},"gcode_move":{"position":[147.0,154.0,60.0,0.0],"gcode_position":[147.0,154.0,60.0,0.0]},"idle_timeout":{"state":"Printing","printing_time":2.4124381759902462},"motion_report":{"live_position":[147.0,154.0,20.687209166666676,0.0],"live_velocity":5.0}},"file_position":46976}{"status":{"heater_bed":{"temperature":23.88},"idle_timeout":{"printing_time":7.4312377059832215},"motion_report":{"live_position":[147.0,154.0,45.78123845238093,0.0]},"toolhead":{"estimated_print_time":107.81678361904761},"temperature_sensor STM32F401L":{"temperature":28.9,"measured_max_temp":28.94},"extruder":{"temperature":24.29},"mcu":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.3e-05,"mcu_task_stddev":7e-06,"bytes_write":21569,"bytes_read":36451,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":1651,"receive_seq":1651,"retransmit_seq":0,"srtt":0.004,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000089}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.3e-05,"mcu_task_stddev":2.6e-05,"bytes_write":1515,"bytes_read":26933,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":209,"receive_seq":209,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000101,"adj":50000158}},"system_stats":{"cputime":10.155086,"memavail":183136}},"file_position":48574}{"status":{"temperature_sensor STM32F401L":{"temperature":28.54,"measured_max_temp":29.06},"idle_timeout":{"printing_time":0.0,"state":"Ready"},"motion_report":{"live_position":[47.0,154.0,60.0,0.0],"live_velocity":-1.4210854715202004e-14},"toolhead":{"estimated_print_time":112.83498845238095,"stalls":1,"position":[47.0,154.0,60.0,0.0],"print_time":111.71085238426762},"extruder":{"temperature":24.32},"heater_bed":{"temperature":23.89},"mcu":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.3e-05,"mcu_task_stddev":9e-06,"bytes_write":21856,"bytes_read":37298,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":1660,"receive_seq":1660,"retransmit_seq":0,"srtt":0.004,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000092}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.6e-05,"mcu_task_stddev":3.5e-05,"bytes_write":1545,"bytes_read":27026,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":214,"receive_seq":214,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000112,"adj":50000188}},"system_stats":{"sysload":0.08,"cputime":10.381738088,"memavail":183016},"gcode_move":{"speed":6000.0,"position":[47.0,154.0,60.0,0.0],"gcode_position":[47.0,154.0,60.0,0.0]}},"file_position":50875}{"status":{"heater_bed":{"temperature":23.89},"toolhead":{"estimated_print_time":117.85126353571428,"print_time":117.78885125331524,"position":[147.0,154.0,60.0,0.0]},"extruder":{"temperature":24.24},"gcode_move":{"position":[147.0,154.0,60.0,0.0],"gcode_position":[147.0,154.0,60.0,0.0]},"temperature_sensor STM32F401L":{"temperature":29.15,"measured_max_temp":29.31},"idle_timeout":{"state":"Printing","printing_time":0.43773041700478643},"mcu":{"last_stats":{"mcu_awake":0.002,"mcu_task_avg":1.4e-05,"mcu_task_stddev":1e-05,"bytes_write":22434,"bytes_read":38195,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":1676,"receive_seq":1676,"retransmit_seq":0,"srtt":0.003,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000107}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.7e-05,"mcu_task_stddev":3.7e-05,"bytes_write":1581,"bytes_read":27135,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":220,"receive_seq":220,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000126,"adj":50000263}},"motion_report":{"live_position":[147.0,154.0,60.0,0.0],"live_velocity":-1.4210854715202004e-14},"system_stats":{"sysload":0.15,"cputime":10.632024289,"memavail":182788}},"file_position":53202}{"status":{"heater_bed":{"temperature":23.78},"temperature_sensor STM32F401L":{"temperature":28.66},"idle_timeout":{"printing_time":0.0,"state":"Ready"},"toolhead":{"estimated_print_time":122.86825064285715,"position":[97.0,154.0,60.0,0.0],"print_time":121.93032446760095},"extruder":{"temperature":24.26},"mcu":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.3e-05,"mcu_task_stddev":9e-06,"bytes_write":22647,"bytes_read":39023,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":1684,"receive_seq":1684,"retransmit_seq":0,"srtt":0.004,"rttvar":0.001,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000101}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.6e-05,"mcu_task_stddev":3.4e-05,"bytes_write":1611,"bytes_read":27228,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":225,"receive_seq":225,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000129,"adj":50000228}},"system_stats":{"sysload":0.14,"cputime":10.854375797},"gcode_move":{"position":[97.0,154.0,60.0,0.0],"gcode_position":[97.0,154.0,60.0,0.0]},"motion_report":{"live_position":[97.0,154.0,60.0,0.0],"live_velocity":-1.4210854715202004e-14}},"file_position":55310}{"status":{"gcode_move":{"position":[197.0,154.0,60.0,0.0],"gcode_position":[197.0,154.0,60.0,0.0]},"heater_bed":{"temperature":23.82},"toolhead":{"estimated_print_time":127.88398959523809,"position":[197.0,154.0,60.0,0.0],"print_time":127.86033619379144},"temperature_sensor STM32F401L":{"temperature":29.31,"measured_max_temp":29.51},"idle_timeout":{"state":"Printing","printing_time":0.7989694790157955},"mcu":{"last_stats":{"mcu_awake":0.002,"mcu_task_avg":1.3e-05,"mcu_task_stddev":1e-05,"bytes_write":22961,"bytes_read":39880,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":1695,"receive_seq":1695,"retransmit_seq":0,"srtt":0.003,"rttvar":0.001,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000099}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.5e-05,"mcu_task_stddev":3e-05,"bytes_write":1641,"bytes_read":27321,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":230,"receive_seq":230,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000130,"adj":50000261}},"motion_report":{"live_position":[197.0,154.0,60.0,0.0],"live_velocity":-1.4210854715202004e-14},"system_stats":{"sysload":0.13,"cputime":11.081745752,"memavail":182800},"extruder":{"temperature":24.27}},"file_position":57352}{"status":{"heater_bed":{"temperature":23.77},"temperature_sensor STM32F401L":{"temperature":28.82},"idle_timeout":{"printing_time":0.6058976560016163,"state":"Printing"},"toolhead":{"estimated_print_time":132.90308604761904,"print_time":132.67250753902957,"position":[227.0,154.0,60.0,0.0]},"extruder":{"temperature":24.26},"mcu":{"last_stats":{"mcu_awake":0.002,"mcu_task_avg":1.3e-05,"mcu_task_stddev":1e-05,"bytes_write":23617,"bytes_read":40808,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":1715,"receive_seq":1715,"retransmit_seq":0,"srtt":0.003,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000087}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.6e-05,"mcu_task_stddev":3.5e-05,"bytes_write":1671,"bytes_read":27414,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":235,"receive_seq":235,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000130,"adj":50000296}},"gcode_move":{"absolute_coordinates":false,"position":[227.0,154.0,60.0,0.0],"gcode_position":[227.0,154.0,60.0,0.0]},"system_stats":{"sysload":0.12,"cputime":11.334070184},"motion_report":{"live_position":[227.0,154.0,60.0,0.0],"live_velocity":-1.4210854715202004e-14}},"file_position":59739}{"status":{"heater_bed":{"temperature":23.75},"temperature_sensor STM32F401L":{"temperature":29.06},"idle_timeout":{"printing_time":0.0,"state":"Ready"},"toolhead":{"estimated_print_time":137.9223968452381},"extruder":{"temperature":24.24},"mcu":{"last_stats":{"mcu_awake":0.002,"mcu_task_avg":1.3e-05,"mcu_task_stddev":1e-05,"bytes_write":23647,"bytes_read":41621,"bytes_retransmit":0,"bytes_invalid":0,"send_seq":1720,"receive_seq":1720,"retransmit_seq":0,"srtt":0.004,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":84000083}},"mcu rpi":{"last_stats":{"mcu_awake":0.001,"mcu_task_avg":1.6e-05,"mcu_task_stddev":3.5e-05,"bytes_write":1701,"bytes_read":27504,"bytes_retransmit":0,"bytes_invalid":55,"send_seq":240,"receive_seq":240,"retransmit_seq":0,"srtt":0.0,"rttvar":0.0,"rto":0.025,"ready_bytes":0,"upcoming_bytes":0,"freq":50000125,"adj":50000167}},"system_stats":{"sysload":0.11,"cputime":11.539035347,"memavail":182716}},"file_position":60856}